class Button extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.args={context:this,cssPrefix:"button"},this.render()}static get observedAttributes(){return["label","theme","size"]}get attributeClick(){return this.getAttribute("click")}get isClick(){return this.attributeClick||!1}attributeChangedCallback(t,e,n){e!==n&&this.render()}buildClick(){if(!this.isClick)return;this.shadowRoot.querySelector("button").addEventListener("click",(()=>this.handleClick()))}draw(){const t=this.getAttribute("label")||"",e=this.getAttribute("type")||"button",n=this.getAttribute("icon")||!1?'\n            <c-icon\n                theme="white"\n                size="extra-big"\n            >\n            </c-icon>\n        ':"";return`\n            <button\n                ${Components.buildCss(this.args)}\n                type="${e}"\n            >\n                ${t} ${n}\n            </button>\n        `}handleClick(){const t=this.args;t.event=this.attributeClick,t.message="Button clicked!",t.theme=this.getAttribute("theme"),t.size=this.getAttribute("size"),Components.dispatch(t)}render(){const t=this.draw();Components.render(this.args,t),this.buildClick()}}customElements.define("c-button",Button);class Game extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.args={context:this,cssPrefix:"game"},this.render()}draw(){return'\n            <style>\n                .ds-game {\n                    background-color: green;\n                }\n            </style>\n            <main class="ds-game ds-game--obfuscated ds-content-position"></main>\n        '}render(){const t=this.draw();Components.render(this.args,t)}}customElements.define("c-game",Game);class HudMenu extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.args={context:this,cssPrefix:"hud-menu"},this.render()}draw(){return'\n            <c-button \n                icon="inventory" \n                theme="black" \n                size="extra-big" \n                tooltip="inventory"\n                is-proportional="true"\n            >\n            </c-button>\n            <c-button \n                icon="inventory" \n                theme="black" \n                size="extra-big" \n                tooltip="inventory"\n                is-proportional="true"\n            >\n            </c-button>\n            <c-button \n                icon="inventory" \n                theme="black" \n                size="extra-big" \n                tooltip="inventory"\n                is-proportional="true"\n            >\n            </c-button>\n            <c-button \n                icon="inventory" \n                theme="black" \n                size="extra-big" \n                tooltip="inventory"\n                is-proportional="true"\n            >\n            </c-button>\n            <c-button \n                icon="inventory" \n                theme="black" \n                size="extra-big" \n                tooltip="inventory"\n                is-proportional="true"\n            >\n            </c-button>\n            <c-button \n                icon="inventory" \n                theme="black" \n                size="extra-big" \n                tooltip="inventory"\n                is-proportional="true"\n            >\n            </c-button>\n        '}render(){const t=this.draw();Components.render(this.args,t)}}customElements.define("c-hud-menu",HudMenu);class HudPage extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.args={context:this,cssPrefix:"hud-page"},this.render()}static get observedAttributes(){return["position"]}attributeChangedCallback(t,e,n){e!==n&&this.render()}draw(){return`\n            <div class="ds-content-theme ds-hud__content-page ds-content--${this.getAttribute("position")||""}">\n                <section class="ds-page">\n                    <div class="ds-page__header">\n                        <div class="ds-center">\n                            <div class="ds-ribbon">\n                                <div class="ds-ribbon__content">\n                                    <div class="ds-center">\n                                        <div class="ds-content__title">\n                                            <h2 class="ds-title">${this.getAttribute("title")||" "}</h2>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div class="ds-content__close">\n                            \n            <c-button \n                icon="close" \n                theme="red" \n                size="extra-small" \n                tooltip="close"\n                is-proportional="true"\n                is-rounded="true"\n            >\n            </c-button>\n        \n                        </div>\n                    </div>\n                    text\n                    <div class="ds-page__content ds-scrollbar">\n                        page content\n                    </div>\n                    <div class="ds-page__footer">\n                        footer\n                    </div>\n                </section>\n            </div>\n        `}render(){const t=this.draw();Components.render(this.args,t)}}customElements.define("c-hud-page",HudPage);class HudStatus extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.args={context:this,cssPrefix:"hud-status"},this.render()}draw(){return'\n            <c-progress \n                id="hud_progress_life"\n                value="30" \n                value-max="100" \n                theme="red" \n                direction="horizontal"\n                tooltip="life"\n            >\n            </c-progress>\n            <c-progress \n                id="hud_progress_mana"\n                value="1000" \n                value-max="100" \n                theme="blue" \n                direction="horizontal"\n                tooltip="mana"\n            >\n            </c-progress>\n            <c-progress \n                id="hud_progress_experience"\n                value="70" \n                value-max="100" \n                theme="yellow" \n                direction="horizontal"\n                tooltip="experience"\n            >\n            </c-progress>\n        '}render(){const t=this.draw();Components.render(this.args,t)}}customElements.define("c-hud-status",HudStatus);class Icon extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.args={context:this,cssPrefix:"icon"},this.render()}static get observedAttributes(){return["theme","size"]}draw(){return`\n            <svg ${Components.buildCss(this.args)}>\n                <use xlink:href="https://localhost/d/projects/october-31/october-31-assets/docs/img/wf/2-0-0/icon.svg#plus"></use>\n            </svg>\n        `}render(){const t=this.draw();Components.render(this.args,t)}}customElements.define("c-icon",Icon);class Input extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.args={context:this,cssPrefix:"input"},this.render()}static get observedAttributes(){return["type","theme","size"]}attributeChangedCallback(t,e,n){e!==n&&this.render()}draw(){return`\n            <input ${Components.buildType(this.args)}>\n        `}render(){const t=this.draw();Components.render(this.args,t)}}customElements.define("c-input",Input);class Progress extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.args={context:this,cssPrefix:"hud-progress"},this.render()}static get observedAttributes(){return["value","valueMax","theme","direction","tooltip"]}attributeChangedCallback(t,e,n){e!==n&&this.render()}draw(){return`\n            <div class="ds-progress ds-progress--${this.getAttribute("theme")}">\n                <div class="ds-progress__bar" style="width: ${this.getAttribute("value")}%"></div>\n            </div>\n        `}render(){const t=this.draw();Components.render(this.args,t)}}customElements.define("c-progress",Progress);class Tooltip extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.args={context:this,cssPrefix:"tooltip"},this.render()}static get observedAttributes(){return["label","theme","size"]}attributeChangedCallback(t,e,n){e!==n&&this.render()}draw(){return"tooltip"}render(){const t=this.draw();Components.render(this.args,t),this.buildClick()}}customElements.define("c-tooltip",Tooltip);